# NOTE: This code is now contained in shared_code
# #############################
# #     CREATE A NEW TICKET   #
# #############################
# @app.route(route="ticket/create", auth_level=func.AuthLevel.FUNCTION, methods=['POST'])
# def create_ticket(req: func.HttpRequest) -> func.HttpResponse:
#     """
#     Creates a new ticket document in the tickets container.
#     We auto-generate the ticket_id (and so the Cosmos DB 'id').
#     The request body must contain other required fields (e.g., user_id, email, event_id).
    
#     Returns a status message on success/failure.
#     Partition key is ticket_id.
#     """
#     try:
#         # Parse JSON from request
#         data = req.get_json()
#         new_ticket_id = str(uuid.uuid4())
#         data["ticket_id"] = new_ticket_id
#         data["id"] = new_ticket_id  # 'id' must match the partition key for direct reads in Cosmos

#         # Load and validate against ticket schema
#         with open('schemas/ticket.json', 'r') as f:
#             schema = json.load(f)
#         jsonschema.validate(instance=data, schema=schema)

#         # Create item in Cosmos DB
#         TicketsContainerProxy.create_item(data)

#         return func.HttpResponse(
#             status_code=200,
#             body=json.dumps({"message": "Ticket created successfully.", "ticket_id": new_ticket_id})
#         )
#     except json.JSONDecodeError:
#         return func.HttpResponse(
#             status_code=400,
#             body=json.dumps({"error": "Invalid JSON in request body."})
#         )
#     except jsonschema.ValidationError as ve:
#         return func.HttpResponse(
#             status_code=400,
#             body=json.dumps({"error": f"Schema validation error: {ve.message}"})
#         )
#     except Exception as e:
#         logging.error(f"Error creating ticket: {str(e)}")
#         return func.HttpResponse(
#             status_code=500,
#             body=json.dumps({"error": f"Failed to create ticket: {str(e)}"})
#         )


# #############################
# #  READ ALL TICKETS (LIST)  #
# #############################
# @app.route(route="ticket/readAll", auth_level=func.AuthLevel.FUNCTION, methods=['GET'])
# def get_all_tickets(req: func.HttpRequest) -> func.HttpResponse:
#     """
#     Retrieves all tickets from the tickets container.
#     Returns them as a JSON array.
#     """
#     try:
#         tickets = list(TicketsContainerProxy.read_all_items())
#         return func.HttpResponse(
#             status_code=200,
#             body=json.dumps(tickets, default=str)
#         )
#     except Exception as e:
#         logging.error(f"Error retrieving all tickets: {str(e)}")
#         return func.HttpResponse(
#             status_code=500,
#             body=json.dumps({"error": f"Failed to retrieve all tickets: {str(e)}"})
#         )


# #############################
# #     READ ONE TICKET       #
# #############################
# @app.route(route="ticket/read/{ticket_id}", auth_level=func.AuthLevel.FUNCTION, methods=['GET'])
# def get_ticket(req: func.HttpRequest) -> func.HttpResponse:
#     """
#     Retrieves a single ticket by its ticket_id using direct read_item,
#     because partition key is ticket_id and the id is also ticket_id.
#     """
#     try:
#         ticket_id = req.route_params.get('ticket_id')

#         # Direct read (most efficient in Cosmos)
#         ticket = TicketsContainerProxy.read_item(
#             item=ticket_id,
#             partition_key=ticket_id
#         )

#         return func.HttpResponse(
#             status_code=200,
#             body=json.dumps(ticket, default=str)
#         )

#     except cosmos_exceptions.CosmosResourceNotFoundError:
#         # If the item doesn't exist, read_item() will raise a 404 error
#         return func.HttpResponse(
#             status_code=404,
#             body=json.dumps({"error": f"Ticket with ID '{ticket_id}' not found."})
#         )
#     except Exception as e:
#         logging.error(f"Error retrieving ticket: {str(e)}")
#         return func.HttpResponse(
#             status_code=500,
#             body=json.dumps({"error": f"Failed to retrieve ticket: {str(e)}"})
#         )


# #############################
# #       UPDATE TICKET       #
# #############################
# @app.route(route="ticket/update/{ticket_id}", auth_level=func.AuthLevel.FUNCTION, methods=['PUT'])
# def update_ticket(req: func.HttpRequest) -> func.HttpResponse:
#     """
#     Updates a ticket with the new data.
#     Must provide valid JSON that matches ticket schema.
#     The ticket_id in the route is used for the partition key.
#     """
#     try:
#         ticket_id = req.route_params.get('ticket_id')
#         new_data = req.get_json()

#         # Validate the new data against the schema
#         with open('schemas/ticket.json', 'r') as f:
#             schema = json.load(f)
#         jsonschema.validate(instance=new_data, schema=schema)

#         # Read the existing ticket to ensure it exists
#         existing_ticket = TicketsContainerProxy.read_item(
#             item=ticket_id,
#             partition_key=ticket_id
#         )

#         # For a "replace" operation, we must keep the same 'id' and 'ticket_id'
#         # so that it remains the same document in Cosmos.
#         new_data["id"] = ticket_id
#         new_data["ticket_id"] = ticket_id

#         # Perform the replace
#         TicketsContainerProxy.replace_item(
#             item=existing_ticket,
#             body=new_data
#         )

#         return func.HttpResponse(
#             status_code=200,
#             body=json.dumps({"message": "Ticket updated successfully."})
#         )

#     except cosmos_exceptions.CosmosResourceNotFoundError:
#         return func.HttpResponse(
#             status_code=404,
#             body=json.dumps({"error": f"Ticket with ID '{ticket_id}' not found."})
#         )
#     except json.JSONDecodeError:
#         return func.HttpResponse(
#             status_code=400,
#             body=json.dumps({"error": "Invalid JSON in request body."})
#         )
#     except jsonschema.ValidationError as ve:
#         return func.HttpResponse(
#             status_code=400,
#             body=json.dumps({"error": f"Schema validation error: {ve.message}"})
#         )
#     except Exception as e:
#         logging.error(f"Error updating ticket: {str(e)}")
#         return func.HttpResponse(
#             status_code=500,
#             body=json.dumps({"error": f"Failed to update ticket: {str(e)}"})
#         )


# #############################
# #      DELETE TICKET        #
# #############################
# @app.route(route="ticket/delete/{ticket_id}", auth_level=func.AuthLevel.FUNCTION, methods=['DELETE'])
# def delete_ticket(req: func.HttpRequest) -> func.HttpResponse:
#     """
#     Deletes a ticket document by its ticket_id.
#     We do a direct delete_item with ticket_id (id) + ticket_id (partition_key).
#     """
#     try:
#         ticket_id = req.route_params.get('ticket_id')

#         TicketsContainerProxy.delete_item(
#             item=ticket_id,
#             partition_key=ticket_id
#         )

#         return func.HttpResponse(
#             status_code=200,
#             body=json.dumps({"message": "Ticket deleted successfully."})
#         )
#     except cosmos_exceptions.CosmosResourceNotFoundError:
#         return func.HttpResponse(
#             status_code=404,
#             body=json.dumps({"error": f"Ticket with ID '{ticket_id}' not found."})
#         )
#     except Exception as e:
#         logging.error(f"Error deleting ticket: {str(e)}")
#         return func.HttpResponse(
#             status_code=500,
#             body=json.dumps({"error": f"Failed to delete ticket: {str(e)}"})
#         ) 